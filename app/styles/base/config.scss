// Typography
$base-font-size: 16px;
$base-font-size-unitless: 16;
$base-line-height-unitless: (26/16);

// Colors
$white: hsl(0, 0%, 100%);
$black: hsl(0, 0%, 0%);
$darkgrey: rgb(76, 76, 76);
$grey: #D5D5D5;
$lightgrey: #fafafa;

// lightcyan
// indianred
// darkkhaki

// Layout
$space: 30px;
$border-width: 2px;

// Susy
// gutters are defined in a ratio to the column width
$susy: (
	box-sizing: border-box,
	columns: 12,
	gutters: (12/88),
	container: 1060px
);

// Good looking easings for animation
$easing:  cubic-bezier(0.165, 0.840, 0.400, 1.000);
$easing2: cubic-bezier(0.300, 0.000, 0.000, 1.300);
$easing3: cubic-bezier(0.860, 0.000, 0.070, 1.000);
$easing4: cubic-bezier(0.250, 1.400, 0.180, 1.000); // try with 200ms
$easing5: cubic-bezier(0.200, 0.300, 0.250, 0.900);

// Breakpoints
$layout-s: 414px;
$layout-sm: 600px;
$layout-m: 740px;
$layout-ml: 1024px;
$layout-l: 1280px;


/**
 * Mixins
 */

@mixin clearfix {
	&:before,
	&:after {
		content: ' '; /* 1 */
		display: table; /* 2 */
	}

	&:after {
		clear: both;
	}
}

/**
 * Strips units from a number
 */

@function strip-unit($num) {
	@return $num / ($num * 0 + 1);
}

/**
 * Convert value to REM
 */

@function rem($target, $context: $base-font-size) {
	@return (strip-unit($target) / strip-unit($context)) * 1rem;
}

/**
 * Convert value to EM
 */

@function em($target, $context: $base-font-size) {
	@return (strip-unit($target) / strip-unit($context)) * 1em;
}

/**
* Convert points to px
* by making up for the difference in DPI.
* you could also do $target& * 1.33333 and get the same result
*/
@function ptpx($target) {
	@return (strip-unit($target) / 72) * 96;
}

/**
* Convert points to REM
*/
@function ptrem($target) {
	@return rem(ptpx($target));
}

